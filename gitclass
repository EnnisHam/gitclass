#!/usr/bin/python
import os,sys,subprocess,json,argparse,shutil

DATAFILE = "class.json"

def vs_input(q):
    """
    Version-Safe Input
    Wrapper for input to fix the Python 2/3 input/raw_input situation
    """
    if sys.version_info[0] > 2:
        return input(q)
    return raw_input(q)

def get_class_data():
    try:
        class_file = open(DATAFILE,"r")
    except FileNotFoundError:
        print("No class.json found.\nRun gitclass init!")
        sys.exit()
    return json.load(class_file)

def student_exists(student_test, student_list, test_obj=False):
    for s in student_list:
        if test_obj:
            if s["name"] == student_test["name"]:
                return True
        if s["name"] == student_test:
            return s
    return False

def update_class_data(class_data):
    class_file = open(DATAFILE,"w")
    json.dump(class_data,class_file,indent="\t")
    class_file.close()

def init(args):
    """
    Initializes new class with name and master repo.
    """
    new_class = os.getcwd() + "/" + args.dir
    if args.dir!= "":
        os.mkdir(new_class)
        os.chdir(new_class)
    class_data = {
        "name":"",
        "description":"",
        "students":[],
        "master_repo":""
    }
    print("Initializing new git class")
    class_data["name"] = vs_input("Name of the class: ")
    class_data["description"] = vs_input("Description for {}: ".format(class_data["name"]))
    class_data["master_repo"] = vs_input("URL of master repository: ")
    update_class_data(class_data)
    #Clone master repo
    os.system("git clone {}".format(class_data["master_repo"]))

def update_repos(args):
    """
    Updates repos and logs the recent history of the repo,
    using log_length for how many commits back to show.
    """
    class_data = get_class_data()
    log_length = args.log_length
    log_data = ""
    def update_one(s):
        os.chdir(s)
        os.system("git pull")
        single_log = "=== {} ===\n".format(s)
        single_log += subprocess.run(
            [
                "git",
                "log",
                "--graph",
                "--date={}".format(args.date_format),
                "-n",
                str(log_length)
            ],
            stdout=subprocess.PIPE,
            universal_newlines=True
        ).stdout
        single_log += "======\n"
        os.chdir("../")
        return single_log
    if args.student == "":
        students = class_data["students"]
        for s in students:
            log_data += update_one(s["name"])
    else:
        log_data = update_one(args.student)
    print(log_data)

def add_student(args):
    class_data = get_class_data()
    new_student = {}

    if args.name == "":
        new_student["name"] = vs_input("New student's name: ")
    else:
        new_student["name"] = args.name
    if args.repo == "":
        new_student["repo"] = vs_input("New student's repo: ")
    else:
        new_student["repo"] = args.repo

    if student_exists(new_student,class_data["students"],test_obj=True):
        print("New student already exists!")
        return None
    class_data["students"].append(new_student)
    os.system("git clone {} {}".format(new_student["repo"], new_student["name"]))
    update_class_data(class_data)
    print("Added new student repo for {}".format(new_student["name"]))

def remove_student(args):
    class_data = get_class_data()
    for s in args.names:
        s_obj = student_exists(s, class_data["students"])
        if s_obj:
            print("Found student")
            confirm_msg = "Are you sure you want to delete {} (y/N)?".format(s)
            confirm = vs_input(confirm_msg)
            if confirm == "y" or confirm == "Y":
                shutil.rmtree(s)
                class_data["students"].remove(s_obj)
                update_class_data(class_data)
                print("Deleted {}".format(s))
            else:
                print("Canceled delete")
        else:
            print("No such student found in class.json")
            sys.exit()

parser = argparse.ArgumentParser(description="Manage classroom git repositories")
subparsers = parser.add_subparsers(help="sub-command-help")

#init
parser_init = subparsers.add_parser("init",help="Initialize new git class")
parser_init.add_argument("dir", type=str, nargs="?", default="", help="Name of new class folder")
parser_init.set_defaults(func=init)

#add-student
parser_add_student = subparsers.add_parser("add-student",help="add student to the class")
parser_add_student.add_argument(
    "name",
    nargs="?",
    type=str,
    default="",
    help="student folder name"
)
parser_add_student.add_argument(
    "repo",
     nargs="?",
     type=str,
     default="",
     help="student repo URL"
)
parser_add_student.set_defaults(func=add_student)

#remove-student
parser_remove_student = subparsers.add_parser("remove-student",help="remove student from the class")
parser_remove_student.add_argument(
    "names",
    nargs="*",
    type=str,
    help="students (by folder) to remove"
)
parser_remove_student.set_defaults(func=remove_student)

#update
parser_update = subparsers.add_parser("update", help="Update student repos")
parser_update.add_argument("student", nargs="?", help="Update specific student repo", type=str, default="")
parser_update.add_argument("-l","--log-length", type=int, default=2)
parser_update.add_argument("-d","--date-format", type=str, default="local")
parser_update.set_defaults(func=update_repos)

args = parser.parse_args()
args.func(args)
